#ifndef _GLOBAL_H
#define _GLOBAL_H

#define NUM_QRMODE QRMODE_MAX + 1
#define NUM_ECLEVEL ECLEVEL_MAX + 1
#define NUM_VERSION 40

#define NUMERIC_CHAR_SIZE 10
#define ALPHANUMERIC_CHAR_SIZE 45
#define MAX_NUM_CHARACTER 256

#define NUMERIC_SYM_SIZE 10 // 8.3.2
#define ALPHANUMERIC_SYM_SIZE 11 // 8.3.3
#define JS_EIGHT_SYM_SIZE 8 // 8.3.4

#define CHAR_SIZE_PER_NUMERIC_SYM 3
#define CHAR_SIZE_PER_ALPHANUMERIC_SYM 2
#define CHAR_SIZE_PER_JS_EIGHT_SYM 1

enum QRMode{
    QRMODE_UNDEFINED = -1,
    QRMODE_NUMERIC = 0, // subset of ALPHANUMERIC 
    QRMODE_ALPHANUMERIC = 1, // subset of JS_EIGHT
    QRMODE_JS_EIGHT = 2,
    QRMODE_KANJI = 3,    // 2 byte character set
    QRMODE_MAX = 3
};

enum PLACEMENT_ORIENTATION {
    UP_VERTICAL = 0,
    DOWN_VERTICAL = 1,
    UP_TO_DOWN = 2,
    DOWN_TO_UP = 3
 //   UP_HORIZONTAL = 2,
 //   DOWN_HORIZONTAL = 3
};

enum PLACEMENT_SHAPE {
    REGULAR,
    IRREULGAR // BYTE BY BYTE COPY
};

enum PLACEMENT_TYPE { // UPDATE THE MASK
    TIMING_PATTERN = -8,
    POS_DETECT_PATTERN = -4,
    ALIGN_PATTERN =  -2,
    INFORMATION = -1,
    DATA = 0
};

enum ECLevel {
    ECLEVEL_UNDEFINED = -1,
    ECLEVEL_L = 0,
    ECLEVEL_M = 1,
    ECLEVEL_Q = 2 ,
    ECLEVEL_H = 3 , 
    ECLEVEL_MAX = 4
};

enum QRModeIndicator {
    ECI = 0x0111,
    NUMERIC = 0x0001,
    ALPHANUMERIC = 0x0010,
    EIGHT_BIT_BYTE  = 0x0100,
    KANJI  = 0x1000,
    STRUCTURED_APPEND  = 0x0011,
    FNC1  = 0x01011001, //(First position -  4bits, 2nd position) 
    END_OF_MSG = 0x0000, // Terminator 
};

const static int CHAR_COUNT_INDICATOR_SIZE[NUM_VERSION+1][NUM_QRMODE] = {//Character Count Indicator
        {-1, -1, -1, -1},
        {10, 9, 8, 8}, // Level 1 to 9
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {10, 9, 8, 8},
        {12, 11, 16, 10}, // Level 10 to 26 
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {12, 11, 16, 10},
        {14, 13, 16, 12}, // Level 27 to 40
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12},
        {14, 13, 16, 12}
    };

const static int NUMERIC_CHAR_LIST[NUMERIC_CHAR_SIZE] =  {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39};
const static int ALPHANUMERIC_CHAR_LIST[ALPHANUMERIC_CHAR_SIZE] = {
                    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, // numeric:
                    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, // alphabet
                    0x20, 0x24, 0x25, 0x2A, 0x2B, 0x2D, 0x2E, 0x2F, 0x3A}; // special character

const static int CHAR_TO_ALPHANUMERIC_SYM_LIST[MAX_NUM_CHARACTER] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0x24, 0xFF, 0xFF, 0xFF, 0x25, 0x26, 0xFF, 0xFF,
0xFF, 0xFF, 0x27, 0x28, 0xFF, 0x29, 0x2A, 0x2B, 0x0, 0x1, 0x2,
0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x2C, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

/*
static int data_capacity_info [NUM_VERSION+1][] = {
// version, # of module side(A), Function pattern module(B), Format & version info module (C), data module except C, data capacity as codewords, reminder bits
{0, -1, -1, -1, -1, -1, -1, 0},
{1, 21, 202, 31, 208, 26, 0},
{2, 25, 235, 31, 359, 44, 7},
{3, 29, 243, 31, 567, 70, 7},
{4, 33, 251, 31, 807, 100, 7},
{5, 37, 259, 31, 1079, 134, 7},
{6, 41, 267, 31, 1383, 172, 7},
{7, 45, 390, 67, 1568, 196, 0},
{8, 49, 398, 67, 1936, 242, 0},
{9, 53, 406, 67, 2336, 292, 0},
{10, 57, 414, 67, 2768, 346, 0},
{11, 61, 422, 67, 3232, 404, 0},
{12, 65, 430, 67, 3728, 466, 0},
{13, 69, 438, 67, 4256, 532, 0},
{14, 73, 611, 67, 4651, 581, 3},
{15, 77, 619, 67, 5243, 655, 3},
{16, 81, 627, 67, 5867, 733, 3},
{17, 85, 635, 67, 6523, 815, 3},
{18, 89, 643, 67, 7211, 901, 3},
{19, 93, 651, 67, 7931, 991, 3},
{20, 97, 659, 67, 8683, 1085, 3},
{21, 101, 882, 67, 9252, 1156, 4},
{22, 105, 890, 67, 10068, 1258, 4},
{23, 109, 898, 67, 10916, 1364, 4},
{24, 113, 906, 67, 11796, 1474, 4},
{25, 117, 914, 67, 12708, 1588, 4},
{26, 121, 922, 67, 13652, 1706, 4},
{27, 125, 930, 67, 14628, 1828, 4},
{28, 129, 1203, 67, 15371, 1921, 3},
{29, 133, 1211, 67, 16411, 2051, 3},
{30, 137, 1219, 67, 17483, 2185, 3},
{31, 141, 1227, 67, 18587, 2323, 3},
{32, 145, 1235, 67, 19723, 2465, 3},
{33, 149, 1243, 67, 20891, 2611, 3},
{34, 153, 1251, 67, 22091, 2761, 3},
{35, 157, 1574, 67, 23008, 2876, 0},
{36, 161, 1582, 67, 24272, 3034, 0},
{37, 165, 1590, 67, 25568, 3196, 0},
{38, 169, 1598, 67, 26896, 3362, 0},
{39, 173, 1606, 67, 28256, 3532, 0},
{40, 177, 1614, 67, 29648, 3706, 0}};
*/
static int erdata_capacity[NUM_QRMODE][NUM_ECLEVEL][NUM_VERSION+1] = {
    {{ -1, 41,77,127,187,255,322,370,461,
        552,652,772,883,1022,1101,1250,1408,
        1548,1725,1903,2061,2232,2409,2620,2812,
        3057,3283,3517,3669,3909,4158,4417,4686,
        4965,5253,5529,5836,6153,6479,6743,7089}, 
      { -1, 34,63,101,149,202,255,293,365,
        432,513,604,691,796,871,991,1082,
        1212,1346,1500,1600,1708,1872,2059,2188,
        2395,2544,2701,2857,3035,3289,3486,3693,
        3909,4134,4343,4588,4775,5039,5313,5596}, 
     { -1, 27,48,77,111,144,178,207,259,
        312,364,427,489,580,621,703,775,
        876,948,1063,1159,1224,1358,1468,1588,
        1718,1804,1933,2085,2181,2358,2473,2670,
        2805,2949,3081,3244,3417,3599,3791,3993},
     { -1, 17,34,58,82,106,139,154,202,
        235,288,331,374,427,468,530,602,
        674,746,813,919,969,1056,1108,1228,
        1286,1425,1501,1581,1677,1782,1897,2022,
        2157,2301,2361,2524,2625,2735,2927,3057}},
    {{ -1, 25,47,77,114,154,195,224,279,
        335,395,468,535,619,667,758,854,
        938,1046,1153,1249,1352,1460,1588,1704,
        1853,1990,2132,2223,2369,2520,2677,2840,
        3009,3183,3351,3537,3729,3927,4087,4296},
     { -1, 20,38,61,90,122,154,178,221,
        262,311,366,419,483,528,600,656,
        734,816,909,970,1035,1134,1248,1326,
        1451,1542,1637,1732,1839,1994,2113,2238,
        2369,2506,2632,2780,2894,3054,3220,3391},
     { -1, 16,29,47,67,87,108,125,
        157,189,221,259,296,352,376,426,
        470,531,574,644,702,742,823,890,
        963,1041,1094,1172,1263,1322,1429,1499,
        1618,1700,1787,1867,1966,2071,2181,2298,2420},
     { -1, 10,20,35,50,64,84,93,122,
        143,174,200,227,259,283,321,365,
        408,452,493,557,587,640,672,744,
        779,864,910,958,1016,1080,1150,1226,
        1307,1394,1431,1530,1591,1658,1774,1852}},
    {{ -1, 17,32,53,78,106,134,154,192,
        230,271,321,367,425,458,520,586,
        644,718,792,858,929,1003,1091,1171,
        1273,1367,1465,1528,1628,1732,1840,1952,
        2068,2188,2303,2431,2563,2699,2809,2953},
     { -1, 14,26,42,62,84,106,122,152,
        180,213,251,287,331,362,412,450,
        504,560,624,666,711,779,857,911,
        997,1059,1125,1190,1264,1370,1452,1538,
        1628,1722,1809,1911,1989,2099,2213,2331},
     { -1, 11,20,32,46,60,74,86,108,
        130,151,177,203,241,258,292,322,
        364,394,442,482,509,565,611,661,
        715,751,805,868,908,982,1030,1112,
        1168,1228,1283,1351,1423,1499,1579,1663},
     { -1, 7,14,24,34,44,58,64,84,
        98,119,137,155,177,194,220,250,
        280,310,338,382,403,439,461,511,
        535,593,625,658,698,742,790,842,
        898,958,983,1051,1093,1139,1219,1273}},
    {{ -1, 10,20,32,48,65,82,95,118,
        141,167,198,226,262,282,320,361,
        397,442,488,528,572,618,672,721,
        784,842,902,940,1002,1066,1132,1201,
        1273,1347,1417,1496,1577,1661,1729,1817},
     { -1, 8,16,26,38,52,65,75,93,
        111,131,155,177,204,223,254,277,
        310,345,384,410,438,480,528,561,
        614,652,692,732,778,843,894,947,
        1002,1060,1113,1176,1224,1292,1362,1435},
     { -1, 7,12,20,28,37,45,53,66,
        80,93,109,125,149,159,180,198,
        224,243,272,297,314,348,376,407,
        440,462,496,534,559,604,634,684,
        719,756,790,832,876,923,972,1024},
     { -1, 4,8,15,21,27,36,39,52,
        60,74,85,96,109,120,136,154,
        173,191,208,235,248,270,284,315,
        330,365,385,405,430,457,486,518,
        553,590,605,647,673,701,750,784}}
};

const static int erdata_size[NUM_VERSION][NUM_ECLEVEL] = {
    {19,16,13,9},
    {34,28,22,16},
    {55,44,34,26},
    {80,64,48,36},
    {108,86,62,46},
    {136,108,76,60},
    {156,124,88,66},
    {194,154,110,86},
    {232,182,132,100},
    {274,216,154,122},
    {324,254,180,140},
    {370,290,206,158},
    {428,334,244,180},
    {461,365,261,197},
    {523,415,295,223},
    {589,453,325,253},
    {647,507,367,283},
    {721,563,397,313},
    {795,627,445,341},
    {861,669,485,385},
    {932,714,512,406},
    {1006,782,568,442},
    {1094,860,614,464},
    {1174,914,664,514},
    {1276,1000,718,538},
    {1370,1062,754,596},
    {1468,1128,808,628},
    {1531,1193,871,661},
    {1631,1267,911,701},
    {1735,1373,985,745},
    {1843,1455,1033,793},
    {1955,1541,1115,845},
    {2071,1631,1171,901},
    {2191,1725,1231,961},
    {2306,1812,1286,986},
    {2434,1914,1354,1054},
    {2566,1992,1426,1096},
    {2702,2102,1502,1142},
    {2812,2216,1582,1222},
    {2956,2334,1666,1276}
};

typedef struct qrsymbol {
        int *codewords;
        int len;
} qrsymbol;

#endif







